class Solution {
    public int search(int[] nums, int target) 
    {
        int pivot = Pivot(nums);
        if(pivot==-1)
        {
             return binarySearch(nums,target,0,nums.length-1);
        }
        if(nums[pivot]==target)
        {
            return pivot;
        }
       
        if(target==nums[0])
        {
         return 0;
        }
         if(target>nums[0])
        {
         return binarySearch(nums,target,0,pivot-1);
        }
        
        
        return binarySearch(nums,target,pivot+1,nums.length-1);
       
    }
    
    
    public static int Pivot(int[] arr)
    {
      
        int start = 0;
        int end = arr.length - 1;
       
        
         
       while(start<=end)
       {
         int mid = start + (end-start)/2;
           if(mid<end&&arr[mid]>arr[mid+1] )
        {
            
            return mid;
        }
        if( mid>start&&arr[mid-1]>arr[mid] ) //case 2 
        {
            
            return mid-1;
        }
        
        if(arr[start]>=arr[mid])//case 4 
        {
               end = mid-1;
        }
           else
           {
               start = mid+1;
           }
       }
        return -1;
        
    }
    
    
	public static int binarySearch(int[] arr, int t, int s, int e)
	{
	    
	    if(arr.length == 0)
	    {
	        return -1;
	    }
	    int start = s;
	    int end = e;
	    while(start<=end)
	    {
	        int mid = start + (end-start)/2;
	        if(t>arr[mid])
	        {
	            start = mid+1;
	        }
	        else if (t<arr[mid])
	        {
	            end = mid - 1;
	        }
	        else
	        {
	           return mid;    
	        }
	    }
	    return -1;
	    
	}
    
    
}
